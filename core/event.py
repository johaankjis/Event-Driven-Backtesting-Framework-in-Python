"""
Event definitions for the event-driven backtesting framework.
"""
from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from typing import Optional


class EventType(Enum):
    """Event types in the backtesting system."""
    MARKET = "MARKET"
    SIGNAL = "SIGNAL"
    ORDER = "ORDER"
    FILL = "FILL"


class SignalType(Enum):
    """Signal types for trading."""
    LONG = "LONG"
    SHORT = "SHORT"
    EXIT = "EXIT"


class OrderType(Enum):
    """Order types."""
    MARKET = "MARKET"
    LIMIT = "LIMIT"


@dataclass
class Event:
    """Base event class."""
    event_type: EventType
    timestamp: datetime


@dataclass
class MarketEvent(Event):
    """
    Market data event containing price information.
    """
    symbol: str
    open: float
    high: float
    low: float
    close: float
    volume: float
    
    def __init__(self, timestamp: datetime, symbol: str, open: float, 
                 high: float, low: float, close: float, volume: float):
        super().__init__(EventType.MARKET, timestamp)
        self.symbol = symbol
        self.open = open
        self.high = high
        self.low = low
        self.close = close
        self.volume = volume


@dataclass
class SignalEvent(Event):
    """
    Signal event generated by strategy.
    """
    symbol: str
    signal_type: SignalType
    strength: float  # Signal strength (0-1)
    
    def __init__(self, timestamp: datetime, symbol: str, 
                 signal_type: SignalType, strength: float = 1.0):
        super().__init__(EventType.SIGNAL, timestamp)
        self.symbol = symbol
        self.signal_type = signal_type
        self.strength = strength


@dataclass
class OrderEvent(Event):
    """
    Order event to be executed.
    """
    symbol: str
    order_type: OrderType
    quantity: int
    direction: str  # 'BUY' or 'SELL'
    
    def __init__(self, timestamp: datetime, symbol: str, 
                 order_type: OrderType, quantity: int, direction: str):
        super().__init__(EventType.ORDER, timestamp)
        self.symbol = symbol
        self.order_type = order_type
        self.quantity = quantity
        self.direction = direction


@dataclass
class FillEvent(Event):
    """
    Fill event representing executed order.
    """
    symbol: str
    quantity: int
    direction: str
    fill_price: float
    commission: float
    slippage: float
    
    def __init__(self, timestamp: datetime, symbol: str, quantity: int,
                 direction: str, fill_price: float, commission: float = 0.0,
                 slippage: float = 0.0):
        super().__init__(EventType.FILL, timestamp)
        self.symbol = symbol
        self.quantity = quantity
        self.direction = direction
        self.fill_price = fill_price
        self.commission = commission
        self.slippage = slippage
